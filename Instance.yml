AWSTemplateFormatVersion: 2010-09-09
Description: 'This template is for creating all EC2 Instances.'

Parameters:
  LatestAmiId: # This selects the latest ami id dynamically
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  EnvironmentName:
    Description: Environment Name to deploy the server (Selecting Production environment will incur cost)
    Type: String
    AllowedValues: [Development, Staging, Production]
    ConstraintDescription: Must be Development or Production
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: String
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Mappings:
  EnvironmentToInstanceType:
    Development:
      instanceType: t2.micro
    Staging:
      instanceType: t2.micro
    Production:
      instanceType: t2.small #production is only for demo. Selecting t2.small will incur cost

Resources:
#EC2Instance for the JumpBox
  JumpBoxInstance: 
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: JumpBox
      NetworkInterfaces: 
      - AssociatePublicIpAddress: "true"
        DeviceIndex: "0"
        SubnetId:  !ImportValue JumpBoxPublicSubnet
        GroupSet: 
          - !ImportValue WebServerSecurityGroup
#EC2Instance for the Front facing Server
  FrontServerInstance: 
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SubnetId: !ImportValue FrontServerPrivateSubnet
      SecurityGroupIds:
        - !ImportValue FrontInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: FrontServerInstance

#EC2Instance for the App server
  AppServerInstance: 
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !FindInMap [EnvironmentToInstanceType, !Ref 'EnvironmentName', instanceType]
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SubnetId: !ImportValue AppServerPrivateSubnet
      SecurityGroupIds:
        - !ImportValue AppInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: AppServerInstance
Outputs:
  JumpBoxPublicIp:
    Description: 'JumpBox Public IP'
    Value: !Sub '${JumpBoxInstance.PublicIp}'
    Export:
      Name: JumpBoxIp
  ApplicationPrivateIp:
    Description: 'Application Server Private IP'
    Value: !Sub '${AppServerInstance.PrivateIp}'
    Export:
      Name: ApplicationPrivateIp
