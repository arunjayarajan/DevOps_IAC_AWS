AWSTemplateFormatVersion: 2010-09-09
Description: 'This template is for creating a Infrastructure, Which contains 2 availabiliy zones 
in a VPC with 2 public subnets and 2 private subnets. One of the public subnet contains a JumpBox from 
which we can connect to all other instances in the VPC. There is a RDS DB with MySQl engine which can 
be connected only from the app instance in the private subnet.'

Parameters:
  # LatestAmiId:
  #   Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
  #   Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  # EnvironmentName:
  #   Description: Environment Name to deploy the server
  #   Type: String
  #   AllowedValues: [Development, Production]
  #   ConstraintDescription: must be Development or Production
  # KeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
  #   Type: 'AWS::EC2::KeyPair::KeyName'
  #   ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  TCPLocation:
    Description: ' The IP address range that can be used to access the server using TCP from JumpBox.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  # DBInstanceID:
  #   Default: RDSDBInstance
  #   Description: My database instance
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '63'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: >-
  #     Must begin with a letter and must not end with a hyphen or contain two
  #     consecutive hyphens.
  # DBName:
  #   Default: RDSDemoDB
  #   Description: Demo database
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '64'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  # DBInstanceClass:
  #   Default: db.t2.micro
  #   Description: DB instance class
  #   Type: String
  #   ConstraintDescription: Must select a valid DB instance type.
  # DBAllocatedStorage:
  #   Default: '20'
  #   Description: The size of the database (GiB)
  #   Type: Number
  #   MinValue: '20'
  #   MaxValue: '65536'
  #   ConstraintDescription: must be between 20 and 65536 GiB.
  # DBUsername:
  #   NoEcho: 'true'
  #   Description: Username for MySQL database access
  #   Type: String
  #   MinLength: '1'
  #   MaxLength: '16'
  #   AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  #   ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  # DBPassword:
    # NoEcho: 'true'
    # Description: Password MySQL database access
    # Type: String
    # MinLength: '8'
    # MaxLength: '41'
    # AllowedPattern: '[a-zA-Z0-9]*'
    # ConstraintDescription: must contain only alphanumeric characters.

Mappings:
  EnvironmentToInstanceType:
    Development:
      instanceType: t2.micro
    Production:
      instanceType: t2.small #production is only for demo. Selecting t2.small will incur cost

Resources:
# VPC where our Infrastructure is hosted. Its on the network - 10.0.0.0/16  
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.0.0.0/16

# Internet Access for the VPC     
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# Route tables for our Public subnet:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public

# Public route table has direct routing to IGW: 
  PublicRoute1:   
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#To associate Public Route and public subnet
  mySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref JumpBoxPublicSubnet
      RouteTableId: !Ref PublicRouteTable
#Public Subnet for Jumpbox
  JumpBoxPublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select 
         - 0
         - Fn::GetAZs: !Ref 'AWS::Region'

#Private Subnet for App Server  
  AppServerPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
         - 1
         - Fn::GetAZs: !Ref 'AWS::Region'

#Private Subnet for App Server  
  FrontServerPrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
         - 0
         - Fn::GetAZs: !Ref 'AWS::Region'

#Private Subnets for DB Instance for high avaiability 
  RDSDBPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.5.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
  
  RDSDBPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.6.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'

#Security Group for JumpBox Instance
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress: #Outbound Rule
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.0/24 #IP range of JumbBox
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.2.0/24 #IP range of App Instance
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.3.0/24  #IP range of front facing server

#Security Group for App Server Instance  
  AppInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TCPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.5.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.6.0/24

#Security Group for Front facing server 
  FrontInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref TCPLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref TCPLocation
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.0/24

#Subnet group for RDS DB
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS DB"
      SubnetIds:
      - !Ref "RDSDBPrivateSubnet1"
      - !Ref "RDSDBPrivateSubnet2"   
  
  #SecurityGroup for RDS DB- MySQL
  RDSDBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group for RDS DB"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "10.0.2.0/24"
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.2.0/24
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.2.0/24
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: VPCSecurityGroups 

Outputs:
  JumpBoxPublicSubnetExport:
    Description: Public Subnet for JumpBox
    Value: !Ref JumpBoxPublicSubnet
    Export:
      Name: JumpBoxPublicSubnet
  
  AppInstancePrivateSubnetExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref AppServerPrivateSubnet
    Export:
      Name: AppServerPrivateSubnet
  FrontServerPrivateSubnetExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref FrontServerPrivateSubnet
    Export:
      Name: FrontServerPrivateSubnet
  WebServerSecurityGroupExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: WebServerSecurityGroup
  AppInstanceSecurityGroupExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref AppInstanceSecurityGroup
    Export:
      Name: AppInstanceSecurityGroup
  FrontInstanceSecurityGroupExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref FrontInstanceSecurityGroup
    Export:
      Name: FrontInstanceSecurityGroup
  DBInstanceSecurityGroupExport:
    Description: Private Subnet for AppServer Instance
    Value: !GetAtt RDSDBEC2SecurityGroup.GroupId
    Export:
      Name: RDSDBEC2SecurityGroup
  DBInstanceSubnetGroupExport:
    Description: Private Subnet for AppServer Instance
    Value: !Ref RDSDBSubnetGroup
    Export:
      Name: RDSDBSubnetGroup
  VPC:
    Description: VPC for the Demo.
    Value: !Ref VPC
    Export:
      Name: VPCName
